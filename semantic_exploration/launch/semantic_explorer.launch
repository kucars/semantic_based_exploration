<?xml version="1.0"?>
<launch>
    <arg name="screen" default="screen"/>
    <arg name="subscript" default="" />
    <arg name="enable_logging" default="false" />
    <arg name="enable_ground_truth" default="true" />
    <arg name="param_file" default="$(find semantic_exploration)/config/semantic_exploration.yaml" />

    <arg name="x" default="-4.0"/> <!-- 9 , 5 , 0.12    (0,1)(-4,5) (-6, 0)-->   
    <arg name="y" default="5.0"/> <!-- 8, -2 , 0.12-->  
    <arg name="z" default="0.25"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="1.57079632679"/>

    <!-- Whether to use perfect gazebo position of PX4 LPE/EKF2 Position  -->
    <arg name="use_gazebo_ground_truth" default="true"/>

    <!-- Ros transformation -->
    <node pkg="tf" type="static_transform_publisher" name="tf_local_origin"
    args="$(arg x) $(arg y) $(arg z) 0 0 0 world local_origin 100"/>

    <node pkg="tf" type="static_transform_publisher" name="tf_camera"
    args="0.1 0 0.1 -1.57 0 -1.57 odom camera_link 100"/>

    <!-- vehicle model and world -->
    <arg name="est" default="ekf2"/>
    <arg name="vehicle" default="iris_depth_camera"/>
    <arg name="world_file_name"    default="simple_obstacle" />
    <!--arg name="world" default="$(find semantic_exploration)/worlds/test_semantic_color.world"/-->
    <arg name="world" default="$(find semantic_exploration)/worlds/texture_world_with_objects_small.world"/>
    <arg name="rcS" default="$(find px4)/posix-configs/SITL/init/$(arg est)/iris"/>

    <param name="use_sim_time" value="true" />

    <arg name="headless" default="false"/>
    <arg name="ns" default="/"/>
    <arg name="build" default="posix_sitl_default"/>
    <arg name="gcs_url" default="" />   <!-- GCS link is provided by SITL -->
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />

    <!-- gazebo configs -->
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="respawn_gazebo" default="false"/>

    <!-- MAVROS configs -->
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="respawn_mavros" default="false"/>

    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <arg name="ID" default="0"/>

    <env name="PX4_SIM_MODEL" value="$(arg vehicle)" />
    <env name="PX4_ESTIMATOR" value="$(arg est)" />
    <!-- PX4 SITL -->
    <arg unless="$(arg interactive)" name="px4_command_arg1" value="-d"/>
    <arg     if="$(arg interactive)" name="px4_command_arg1" value=""/>
    <node name="sitl" pkg="px4" type="px4" output="screen" args="$(find px4) $(arg rcS) $(arg px4_command_arg1)" required="true"/>

    <!-- Launch MavROS -->
    <group ns="$(arg ns)">
        <include file="$(find mavros)/launch/node.launch">
            <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
            <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
            <arg name="config_yaml" value="$(find semantic_exploration)/config/px4_config.yaml" />
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
        </include>
    </group>

    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="headless" value="$(arg headless)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="false"/>
        <arg name="world_name" value="$(arg world)" />
    </include>

    <!-- Spawn vehicle model -->
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen"
        args="-sdf -database $(arg vehicle) -model iris -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)">
    </node>

    <!--arg name="pcl_topic" default="/camera/depth/points" /-->
    <arg name="pcl_topic" default="/semantic_pcl/semantic_pcl"/>
    <arg name="stl_file_path" default="" />

    <rosparam command="load" file="$(arg param_file)" />
    <node pkg="semantic_exploration" name="rrt_planner" type="rrt_planner" output="screen">
        <param name="stl_file_path" type="string" value="$(arg stl_file_path)" />
        <remap from="pointcloud_throttled" to="$(arg pcl_topic)"/>
        <remap from="poseStamped" to="/current_pose"/>
        <remap from="semantic_exploration" to="/semantic_exploration"/>
    </node>
    
    <group if="$(arg use_gazebo_ground_truth)">
        <!-- Send transformation between the gazebo ground truth and world -->
        <node pkg="semantic_exploration" name="send_transform" type="send_transform.py" output="$(arg screen)"/>
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find semantic_exploration)/rviz/semantic_simulation.rviz"/>
    </group>
    <group unless="$(arg use_gazebo_ground_truth)">
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find semantic_exploration)/rviz/semantic.rviz"/>
    </group>

    <rosparam file="$(find semantic_cloud)/config/semantic_cloud.yaml" command="load"/>
    <node pkg="semantic_cloud" type="semantic_labelling.py" name="semantic_cloud" output="screen"/>

    <node pkg="semantic_exploration" name="drone_commander" type="drone_commander" output="screen"/>
    <node pkg="semantic_exploration" name="exploration_planner_node" type="exploration_planner_node"/> <!-- output="screen"/-->

    <!--node pkg="orb_slam2" type="rgbd" name="rgbd" output="screen" args="$(find orb_slam2)../../../Vocabulary/ORBvoc.txt $(find semantic_exploration)/config/orb_slam.yaml"/>
    <node pkg="topic_tools" type="relay" name="depth_registered_relay" args="/camera/depth/image_raw /camera/depth_registered/image_raw" /-->

</launch>
